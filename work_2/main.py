from cvxopt import matrix, solvers


def capital_cost_gop(num):
    cost = 0
    if num == 1:
        cost = 1000
    elif num == 2:
        cost = 1900
    elif num == 3:
        cost = 3600

    return cost


def power_gop(num):
    power = 0
    if num == 1:
        power = 1220*5
    elif num == 2:
        power = 2234*5
    elif num == 3:
        power = 4344*5

    return power


# стоимость перевозок из ГДП в точки размещения
c = matrix([6.6, 3.2, 3.9, 5.4, 5.8,   # из 1 ГДП
            1.1, 3.6, 9.6, 1.9, 8.2,   # из 2 ГДП
            3.0, 5.6, 5.2, 3.2, 2.8,   # из 3 ГДП
            1.6, 3.7, 9.1, 4.7, 3.5,   # из 4 ГДП
            8.3, 6.0, 1.2, 6.4, 8.2],  # из 5 ГДП
           tc='d')


G = matrix([
            # ограничения по максимальной мощности ГОП
            [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0],  # 1 ГОП
            [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0],  # 2 ГОП
            [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0],  # 3 ГОП
            [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],  # 4 ГОП
            [0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1],  # 5 ГОП

            # ограничения на положительность переменных
            [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1],
            ], tc='d')


#           точки размещения ГОП
#           1  2  3  4  5
h = matrix([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], tc='d')


A = matrix([
            # ограничения по годовой выработке ГДП
            [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 1 ГДП
            [0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 2 ГДП
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 3 ГДП
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0],  # 4 ГДП
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1],  # 5 ГДП
            ], tc='d')


#               1      2       3       4       5 ГДП
b = matrix([700*5, 500*5, 1500*5, 1100*5, 1100*5], tc='d')


min_all_costs = 999999999

types_gop = [0, 0, 0, 0, 0]
result_types_gop = [0, 0, 0, 0, 0]
for type_gop_1 in range(4):
    for type_gop_2 in range(4):
        for type_gop_3 in range(4):
            for type_gop_4 in range(4):
                for type_gop_5 in range(4):

                    h[0] = power_gop(type_gop_1)  # ставим в точку 1 ГОП под номером type_gop_1 (0-3)
                    h[1] = power_gop(type_gop_2)  # ставим в точку 2 ГОП под номером type_gop_2 (0-3)
                    h[2] = power_gop(type_gop_3)  # ставим в точку 3 ГОП под номером type_gop_3 (0-3)
                    h[3] = power_gop(type_gop_4)  # ставим в точку 4 ГОП под номером type_gop_4 (0-3)
                    h[4] = power_gop(type_gop_5)  # ставим в точку 5 ГОП под номером type_gop_5 (0-3)

                    solution = solvers.lp(c, G.T, h, A.T, b, solver='glpk',
                                          options={'glpk': {'msg_lev': 'GLP_MSG_OFF'}})

                    if type(solution['primal objective']) == float:

                        types_gop = [type_gop_1, type_gop_2, type_gop_3, type_gop_4, type_gop_5]
                        costs_of_building = 0

                        for i in range(len(types_gop)):
                            costs_of_building += capital_cost_gop(types_gop[i])

                        if solution['primal objective'] + costs_of_building < min_all_costs:
                            result_types_gop = types_gop.copy()
                            min_all_costs = solution['primal objective'] + costs_of_building

print('План строительства:')
for i in range(5):
    print(f'Точка {i+1}: ', end='')
    if result_types_gop[i] == 0:
        print('Пусто')
    else:
        print(result_types_gop[i], 'тип ГОП')
print('Минимальные затраты с таким планом будут равны: ', round(min_all_costs, 2), 'ДЕ')

product_tons = sum(b)/340
price_for_product_ton = min_all_costs/product_tons

print('\nЧтобы данный план принес прибыль, необходимо продавать тонну продукта за', round(price_for_product_ton, 2),
      'ДЕ')
