from cvxopt import matrix, solvers

# c - коэффициенты переменных в целевой функции (себестоимость добычи тонны угля и средние затраты на перевозку угля от
# карьеров до пункта хранения
c = matrix([5.0 + 19.7, 5.0 + 12.8, 5.0 + 22.6, 6.3 + 27.4, 6.3 + 19.7, 6.3 + 29.4, 6.9 + 30.0, 6.9 + 6.8, 6.9 + 4.2,
            9.2 + 31.1, 9.2 + 9.2,
            9.2 + 11.1, 6.3 + 15.9, 6.3 + 30.2, 6.3 + 14.3], tc='d')

# G - коэффициенты переменных в ограничениях-неравенствах
G = matrix([
            # ограничения по суточной добыче угля на карьерах
            [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 1
            [0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],  # 2
            [0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],  # 3
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0],  # 4
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1],  # 5

            # ограничения по вместимости пунктов хранения
            [1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0],  # 1
            [0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0],  # 2
            [0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1],  # 3

            # ограничения по качеству угля
            # зольность
            [0.217, 0.217, 0.217, 0.159, 0.159, 0.159, 0.188, 0.188, 0.188, 0.192, 0.192, 0.192, 0.203, 0.203, 0.203],
            # сера
            [0.016, 0.016, 0.016, 0.022, 0.022, 0.022, 0.015, 0.015, 0.015, 0.014, 0.014, 0.014, 0.022, 0.022, 0.022],
            # влага
            [0.083, 0.083, 0.083, 0.067, 0.067, 0.067, 0.084, 0.084, 0.084, 0.086, 0.086, 0.086, 0.083, 0.083, 0.083],
            # летучие вещества
            [0.311, 0.311, 0.311, 0.337, 0.337, 0.337, 0.355, 0.355, 0.355, 0.359, 0.359, 0.359, 0.324, 0.324, 0.324],

            # ограничения на положительность переменных
            [-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0],
            [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1]], tc='d')

# h - значения правых частей ограничений-неравенств
h = matrix([16, 21, 18, 14, 19, 14, 30, 56, 0.2 * 80, 0.02 * 80, 0.08 * 80, 0.35 * 80,
            0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], tc='d')

# A - коэффициенты переменных в ограничениях-равенствах
A = matrix([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], tc='d')

# b - значения правых частей ограничений-равенств
b = matrix([80], tc='d')

solution = solvers.lp(c, G.T, h, A.T, b, solver='glpk', options={'glpk': {'msg_lev': 'GLP_MSG_OFF'}})


x = solution['x']

l = -1
for i in range(5):
    for j in range(3):
        l += 1
        if abs(round(x[l], 1)) != 0:
            print(f'Из {i + 1}-го карьера в {j + 1}-й пункт хранения:',
                  abs(round(x[l], 1)), 'тонн угля')

print('Минимальные затраты предприятия равны:', round(solution['primal objective'], 2), 'ДЕ\n')

z = solution['z']

increasing_capacity = []

for i in range(3):
    #            1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27
    dh = matrix([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
    dh[5+i] += 1
    solution1 = solvers.lp(c, G.T, h + dh, A.T, b, solver='glpk', options={'glpk': {'msg_lev': 'GLP_MSG_OFF'}})

    increasing_capacity.append(round(solution['primal objective'] - solution1['primal objective'], 2))


max_value = increasing_capacity[0]
max_value_index = 0


for i in range(3):
    if increasing_capacity[i] > max_value:
        max_value = increasing_capacity[i]
        max_value_index = i

print(f'Увеличение объема {max_value_index+1}-го пункта хранения на единицу уменьшит затраты предприятия на',
      max_value, 'ДЕ и они будут равны', round(solution['primal objective'] - max_value, 2), 'ДЕ\n')


increasing_extraction = []


for i in range(5):
    #            1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27
    dh = matrix([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])
    dh[i] += 1
    solution1 = solvers.lp(c, G.T, h + dh, A.T, b, solver='glpk', options={'glpk': {'msg_lev': 'GLP_MSG_OFF'}})

    increasing_extraction.append(round(solution['primal objective'] - solution1['primal objective'], 2))


max_value = increasing_extraction[0]
max_value_index = 0


for i in range(5):
    if increasing_extraction[i] > max_value:
        max_value = increasing_extraction[i]
        max_value_index = i

print(f'Увеличение добычи {max_value_index+1}-го карьера на единицу уменьшит затраты предприятия на',
      max_value, 'ДЕ и они будут равны', round(solution['primal objective'] - max_value, 2), 'ДЕ\n')
